<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tasks</title>
</head>
<body class="bg-gray-50">

    <div class="max-w-2xl mx-auto p-6">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-2xl font-semibold text-gray-700">My Tasks</h2>
            <button id="add-task" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 focus:outline-none">
                Add Task
            </button>
        </div>

        <!-- Input to add task -->
        <input type="text" id="task-input" placeholder="Enter a new task..." class="w-full p-3 border rounded-md border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4">

        <span class="text-2xl block text-center text-gray-400" id="empty-tasks-message"></span>

        {{!-- Log out button --}}
        <button id="logout-button" class="fixed bottom-5 left-5 bg-red-500 text-white rounded p-3">Log out</button>

        <!-- Task List -->
        <ul id="task-list" class="space-y-4">
            <!-- Task items will be inserted here -->
        </ul>
    </div>

    <script type="module">
        document.addEventListener("DOMContentLoaded", () => {
            const taskInput = document.getElementById("task-input");
            const addTaskButton = document.getElementById("add-task");
            const taskList = document.getElementById("task-list");

            const logOutButton = document.querySelector("#logout-button");

            const emptyTasksMessage = document.querySelector("#empty-tasks-message");

            const authToken = localStorage.getItem("idToken"); // Retrieve user ID from localStorage

            if (!authToken) {
                window.location.href = "/login"; // Redirect to login if user is not authenticated
            }

            // Fetch tasks when the page loads
            fetchTasks();

            // Add task event
            addTaskButton.addEventListener("click", async () => {
                const taskTitle = taskInput.value.trim();
                if (taskTitle) {
                    await addTask(taskTitle);
                    taskInput.value = ""; // Clear the input field
                    fetchTasks(); // Reload tasks
                }
            });

            // Fetch tasks from the backend
            async function fetchTasks() {
                const response = await fetch("/tasks", {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${authToken}`, // Include token for authentication
                    }
                });

                const tasks = await response.json();
                renderTasks(tasks);
            }

            // Render tasks in the UI
            function renderTasks(tasks) {
                taskList.innerHTML = ""; // Clear the task list
                if (tasks.length) {
                    tasks.forEach(task => {
                        const taskElement = document.createElement("li");
                        taskElement.classList.add("bg-white", "p-4", "rounded-lg", "shadow-lg", "flex", "justify-between", "items-center", "border", "border-gray-200");

                        const taskTitleContainer = document.createElement("div");
                        taskTitleContainer.classList.add("flex", "items-center", "space-x-4");

                        // Checkbox for task completion
                        const checkbox = document.createElement("input");
                        checkbox.type = "checkbox";
                        checkbox.checked = task.completed;
                        checkbox.classList.add("w-5", "h-5", "accent-blue-500");
                        checkbox.addEventListener("change", () => toggleTaskCompletion(task.id, checkbox.checked));

                        const taskTitle = document.createElement("span");
                        taskTitle.textContent = task.title;
                        taskTitle.classList.add("text-gray-700", "font-medium", task.completed ? "line-through" : "a");

                        taskTitleContainer.appendChild(checkbox);
                        taskTitleContainer.appendChild(taskTitle);

                        const actions = document.createElement("div");
                        actions.classList.add("flex", "space-x-2");

                        const editButton = document.createElement("button");
                        editButton.classList.add("bg-yellow-500", "text-white", "px-3", "py-1", "rounded-md", "hover:bg-yellow-600", "transition");
                        editButton.innerHTML = `<i class="fas fa-edit"></i> Edit`;
                        editButton.addEventListener("click", () => editTask(task.id, task.title));

                        const deleteButton = document.createElement("button");
                        deleteButton.classList.add("bg-red-500", "text-white", "px-3", "py-1", "rounded-md", "hover:bg-red-600", "transition");
                        deleteButton.innerHTML = `<i class="fas fa-trash"></i> Delete`;
                        deleteButton.addEventListener("click", () => deleteTask(task.id));

                        actions.appendChild(editButton);
                        actions.appendChild(deleteButton);

                        taskElement.appendChild(taskTitleContainer);
                        taskElement.appendChild(actions);

                        taskList.appendChild(taskElement);
                    });
                } else {
                    emptyTasksMessage.textContent = "You don't have tasks! Enjoy your day :)";
                }
            }

            // Toggle task completion status
            async function toggleTaskCompletion(taskId, completed) {
                const response = await fetch(`/toggleTask/${taskId}`, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${authToken}`,
                    },
                    body: JSON.stringify({ completed })
                });

                const result = await response.json();
                if (result.success) {
                    fetchTasks();
                } else {
                    alert("Failed to update task completion");
                }
            }

            // Add new task
            async function addTask(title) {
                const response = await fetch("/tasks", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${authToken}`,
                    },
                    body: JSON.stringify({ title })
                });

                const result = await response.json();
                if (result.success) {
                    fetchTasks();
                } else {
                    alert("Failed to add task");
                }
            }

            // Edit a task
            async function editTask(taskId, title) {
                const newTitle = prompt("Edit task title:", title);
                if (newTitle) {
                    const response = await fetch(`/tasks/${taskId}`, {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json",
                            "Authorization": `Bearer ${authToken}`,
                        },
                        body: JSON.stringify({ title: newTitle })
                    });

                    const result = await response.json();
                    if (result.success) {
                        fetchTasks();
                    } else {
                        alert("Failed to edit task");
                    }
                }
            }

            // Delete a task
            async function deleteTask(taskId) {
                const response = await fetch(`/tasks/${taskId}`, {
                    method: "DELETE",
                    headers: {
                        "Authorization": `Bearer ${authToken}`,
                    }
                });

                const result = await response.json();
                if (result.success) {
                    fetchTasks();
                } else {
                    alert("Failed to delete task");
                }
            }

            // Log out
            function logOut() {
                localStorage.removeItem("idToken");
                location.reload();
            }

            logOutButton.addEventListener("click", logOut);
        });
    </script>
</body>
</html>
